/*
 * Copyright (c) 2020.
 * Designed and developed by @quabynah_codelabs (Dennis Bilson)
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-kapt'
apply from: '../dependencies.gradle'

// Preparing Keystore information for bundle signing
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'

            // Signing configuration
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true

            // Signing configuration
            signingConfig signingConfigs.release
        }
    }

    defaultConfig {
        applicationId "io.worldofluxury"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode versions.versionCode
        versionName versions.versionName
        vectorDrawables.useSupportLibrary = true
        archivesBaseName = "swan-wol"
        testInstrumentationRunner "com.skydoves.pokedex.AppTestRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // This AAR includes binaries for all of the Android ABIs. You can reduce the
        // size of your application's binary by only including the ABIs you need
        // to support.
        ndk {
            // abiFilters 'armeabi-v7a', 'arm64-v8a'
        }

        buildConfigField("String", "STRIPE_PUB_KEY", "\"" + keystoreProperties["stripe_pub_key"] + "\"")
        buildConfigField("String", "STRIPE_PUB_SECRET", "\"" + keystoreProperties["stripe_pub_secret"] + "\"")
    }
    aaptOptions {
        noCompress "tflite"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        dataBinding = true
    }
    androidExtensions {
        experimental = true
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
        test.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
}

// Download default models; if you wish to use your own models then
// place them in the "assets" directory and comment out this line.
//apply from:'download.gradle'

dependencies {

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"

    // android supports
    implementation "com.google.android.material:material:$versions.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintVersion"

    // architecture components
    implementation "androidx.fragment:fragment-ktx:$versions.fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$versions.lifecycleVersion"
    implementation "androidx.paging:paging-runtime-ktx:$versions.pagingVersion"
    testImplementation "androidx.paging:paging-common-ktx:$versions.pagingVersion"
    implementation "androidx.room:room-runtime:$versions.roomVersion"
    implementation "androidx.room:room-ktx:$versions.roomVersion"
    kapt "androidx.room:room-compiler:$versions.roomVersion"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navVersion"
    androidTestImplementation "androidx.navigation:navigation-testing:$versions.navVersion"
    implementation "androidx.work:work-runtime-ktx:$versions.workVersion"
    androidTestImplementation "androidx.work:work-testing:$versions.workVersion"
    testImplementation "androidx.arch.core:core-testing:$versions.archCompomentVersion"

    // startup
    implementation "androidx.startup:startup-runtime:$versions.startupVersion"

    // dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    implementation "com.google.dagger:hilt-android:$versions.daggerHiltAndroidVersion"
    implementation "com.google.dagger:hilt-android-testing:$versions.daggerHiltAndroidVersion"
    implementation "androidx.hilt:hilt-common:$versions.daggerHiltVersion"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$versions.daggerHiltVersion"
    implementation "androidx.hilt:hilt-work:$versions.daggerHiltVersion"
    kapt "androidx.hilt:hilt-compiler:$versions.daggerHiltVersion"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kapt "com.google.dagger:hilt-android-compiler:$versions.daggerHiltAndroidVersion"
    kapt "androidx.hilt:hilt-compiler:$versions.daggerHiltVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$versions.daggerHiltAndroidVersion"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$versions.daggerHiltAndroidVersion"

    // network
    implementation "com.github.skydoves:sandwich:$versions.sandwichVersion"
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttpVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttpVersion"

    // moshi
    implementation "com.squareup.moshi:moshi-kotlin:$versions.moshiVersion"
    implementation "com.squareup.moshi:moshi-kotlin-codegen:$versions.moshiVersion"

    // gson
    implementation "com.google.code.gson:gson:$versions.gsonVersion"

    // tensorflow
    // implementation('org.tensorflow:tensorflow-lite:0.0.0-nightly') { changing = true }
    // implementation('org.tensorflow:tensorflow-lite-gpu:0.0.0-nightly') { changing = true }
    // implementation('org.tensorflow:tensorflow-lite-support:0.0.0-nightly') { changing = true }

    // twitter
    implementation "com.twitter.sdk.android:twitter:$versions.twitterVersion"

    // google
    implementation "com.google.android.gms:play-services-auth:$versions.googleVersion"

    // stripe
    implementation "com.stripe:stripe-android:$versions.stripeVersion"

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutinesVersion"

    // glide
    implementation "com.github.bumptech.glide:glide:$versions.glideVersion"
    implementation "com.github.florent37:glidepalette:$versions.glidePaletteVersion"
    kapt "com.github.bumptech.glide:compiler:$versions.glideVersion"

    // transformation
    implementation "com.github.skydoves:transformationlayout:$versions.transformationLayout"

    // whatIf
    implementation "com.github.skydoves:whatif:$versions.whatIfVersion"

    // gradation
    implementation "com.github.skydoves:rainbow:$versions.rainbowVersion"

    // debugging
    implementation "com.jakewharton.timber:timber:$versions.timberVersion"

    // unit test
    testImplementation "junit:junit:$versions.junitVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockitoKotlinVersion"
    testImplementation "org.mockito:mockito-inline:$versions.mockitoInlineVersion"
    testImplementation "org.robolectric:robolectric:$versions.robolectricVersion"
    androidTestImplementation "androidx.test:core:$versions.androidxTest"
    androidTestImplementation "com.google.truth:truth:$versions.truthVersion"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidxTestJunit"
    androidTestImplementation "com.android.support.test:runner:$versions.androidTestRunner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espressoVersion"
}